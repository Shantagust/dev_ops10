name: Build WP Proj

on:
  push:
    branches:
      - main

jobs:
  build:
    name: create ami and TG NOTIFY
    runs-on: ubuntu-latest

    steps:
      - name: Check git repository
        uses: actions/checkout@v3

      - name: Set connect to AWS CLI
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: eu-central-1

      - name: Init Packer
        id: packer_init
        run: |
          cd packer
          packer init wp.pkr.hcl >> init.log 2>&1

      - name: Build AMI
        id: packer_build
        run: |
          cd packer
          packer build -var "aws_access_key=${{ secrets.AWS_ACCESS_KEY }}" -var "aws_secret_key=${{ secrets.AWS_SECRET_KEY }}" wp.pkr.hcl >> build.log 2>&1
        continue-on-error: true

      - name: get actions status
        id: get_status
        run: |
          PACKER_INIT_STATUS=$([[ '${{ steps.packer_init.outcome }}' == 'success' ]] && echo '–°–æ–±—Ä–∞–Ω–æ ‚úÖ' || echo '–í—Å—ë, –∫–æ–Ω–µ—Ü ... ‚ùå')
          echo "PACKER_INIT_STATUS=${PACKER_INIT_STATUS//[$'\n']/ }" >> $GITHUB_ENV  # –ó–∞–º–µ–Ω–∏—Ç—å –Ω–æ–≤—ã–µ —Å—Ç—Ä–æ–∫–∏
          
          PACKER_BUILD_STATUS=$([[ '${{ steps.packer_build.outcome }}' == 'success' ]] && echo '–°–æ–±—Ä–∞–Ω–æ ‚úÖ' || echo '–í—Å—ë, –∫–æ–Ω–µ—Ü ... ‚ùå')
          echo "PACKER_BUILD_STATUS=${PACKER_BUILD_STATUS//[$'\n']/ }" >> $GITHUB_ENV  # –ó–∞–º–µ–Ω–∏—Ç—å –Ω–æ–≤—ã–µ —Å—Ç—Ä–æ–∫–∏
          
          # –ï—Å–ª–∏ –æ–¥–∏–Ω –∏–∑ —à–∞–≥–æ–≤ –Ω–µ —É—Å–ø–µ—à–µ–Ω, –≤—ã–≤–æ–¥–∏–º –æ—à–∏–±–∫—É
          if [[ '${{ steps.packer_init.outcome }}' != 'success' ]]; then
            echo "PACKER_INIT_ERROR=$(cat packer/init.log | tr -d '\n')" >> $GITHUB_ENV  # –£–±–∏—Ä–∞–µ–º –Ω–æ–≤—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏–∑ –ª–æ–≥–∞
          fi
          
          if [[ '${{ steps.packer_build.outcome }}' != 'success' ]]; then
            echo "PACKER_BUILD_ERROR=$(cat packer/build.log | tr -d '\n')" >> $GITHUB_ENV  # –£–±–∏—Ä–∞–µ–º –Ω–æ–≤—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏–∑ –ª–æ–≥–∞
          fi

      - name: TG Notification
        if: always()
        env:
          TG_TOKEN: ${{ secrets.TG_TOKEN }}
          TG_CHAT_ID: ${{ secrets.TG_CHAT_ID }}
        run: |
          MESSAGE="Build statusüí¨:
          *Packer init status*: $PACKER_INIT_STATUS
          *Packer build status*: $PACKER_BUILD_STATUS"
          if [[ "$PACKER_INIT_STATUS" == "–í—Å—ë, –∫–æ–Ω–µ—Ü ... ‚ùå" ]]; then
            MESSAGE="$MESSAGE\n\nINIT ERROR: $(cat init.log)"
          fi
          if [[ "$PACKER_BUILD_STATUS" == "–í—Å—ë, –∫–æ–Ω–µ—Ü ... ‚ùå" ]]; then
            MESSAGE="$MESSAGE\n\nBUILD ERROR: $(cat build.log)"
          fi
          curl -s -X POST https://api.telegram.org/bot${{ env.TG_TOKEN }}/sendMessage \
          -d chat_id=${{ env.TG_CHAT_ID }} \
          -d parse_mode=Markdown \
          -d text="$MESSAGE"