name: Deploy and Test Terraform!

on:
  push:
    branches:
      - terra

jobs:
  terraform:
    name: Deploy AMI with Terraform
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Code
      uses: actions/checkout@v3

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.5.0

    - name: Setup AWS Credentials
      run: |
        aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY }}
        aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_KEY }}
        aws configure set region eu-central-1

    - name: Terraform Init
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_KEY }}
      run: |
        cd terraform
        terraform init

    - name: Terraform Apply
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_KEY }}
      run: |
        cd terraform
        terraform apply -var "aws_access_key_id=${{ secrets.AWS_ACCESS_KEY }}" -var "aws_secret_access_key=${{ secrets.AWS_SECRET_KEY }}" -auto-approve

        # Wait to ensure the instance is fully provisioned
        sleep 10

        
        # Get the raw IP and DNS from Terraform output
        INSTANCE_IP=$(terraform output -raw instance_ip)
        INSTANCE_PUBLIC_DNS=$(terraform output -raw instance_public_dns)
    
        # Debug: Print raw IP and DNS
        echo "Raw IP: $INSTANCE_IP"
        echo "Raw DNS: $INSTANCE_PUBLIC_DNS"
    
        # Clean up IP address by removing invalid characters (non-numeric and non-dot characters)
        INSTANCE_IP_CLEAN=$(echo $INSTANCE_IP | tr -cd '0-9.')
        INSTANCE_PUBLIC_DNS_CLEAN=$(echo $INSTANCE_PUBLIC_DNS | sed 's/\.$//')
    
        # Debug: Print cleaned IP and DNS
        echo "Cleaned IP: $INSTANCE_IP_CLEAN"
        echo "Cleaned DNS: $INSTANCE_PUBLIC_DNS_CLEAN"
    
        # Save cleaned values to GitHub environment variables
        echo "INSTANCE_IP=$INSTANCE_IP_CLEAN" >> $GITHUB_ENV
        echo "INSTANCE_PUBLIC_DNS=$INSTANCE_PUBLIC_DNS_CLEAN" >> $GITHUB_ENV

    - name: Debug INSTANCE_IP and DNS
      run: |
        echo "INSTANCE_IP=${{ env.INSTANCE_IP }}"
        echo "INSTANCE_PUBLIC_DNS=${{ env.INSTANCE_PUBLIC_DNS }}"

    - name: Test HTTP Server
      run: |
        echo "Testing with IP: $INSTANCE_IP and DNS: $INSTANCE_PUBLIC_DNS"
        chmod +x ./scripts/test.sh
        ./scripts/test.sh $INSTANCE_PUBLIC_DNS

    - name: Notify Telegram
      if: always()
      env:
        TELEGRAM_TOKEN: ${{ secrets.TG_TOKEN }}
        CHAT_ID: ${{ secrets.TG_CHAT_ID }}
      run: |
        STATUS="FAILED"
        if [ "${{ job.status }}" == "success" ]; then
          STATUS="SUCCESSFUL"
        fi
        curl -s -X POST "https://api.telegram.org/bot$TELEGRAM_TOKEN/sendMessage" \
          -d chat_id="$CHAT_ID" \
          -d text="Pipeline $STATUS: Deploy and test completed with result ${{ job.status }}."
